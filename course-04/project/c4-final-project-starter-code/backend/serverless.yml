service:
  name: serverless-todo-app

plugins:
  - serverless-aws-documentation
  - serverless-dynamodb-local
  - serverless-iam-roles-per-function
  - serverless-offline
  - serverless-plugin-canary-deployments
  - serverless-plugin-tracing
  - serverless-reqvalidator-plugin
  - serverless-webpack

# package:
#   individually: true

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-2'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    PARTITION_KEY: userId
    SORT_KEY: todoId
    INDEX_KEY: timestamp
    INDEX_NAME: timestampIndex
    TODO_TABLE: lasz-todo-${self:provider.stage}
    # TODO_IMAGES_TABLE: lasz-todo-images-${self:provider.stage}
    TODO_IMAGE_BUCKET: lasz-todo-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: "Allow"
        Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
        Resource:
        - "*"
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}

  # TODO: Configure this function
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new TODO item
            description: Create a new TODO item
            requestModels:
              'application/json': TodoCreateRequest
    iamRoleStatements:
      - Effect: "Allow"
        Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
        Resource:
        - "*"
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
      # - Effect: Allow
      #   Action:
      #     - s3:putObject
      #   Resource: arn:aws:s3:::${self:provider.environment.TODO_IMAGE_BUCKET}/*


  # TODO: Configure this function
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: "Allow"
        Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
        Resource:
        - "*"
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
      # - Effect: Allow
      #   Action:
      #     - s3:PutObject
      #     - s3:UpdateObject
      #   Resource: arn:aws:s3:::${self:provider.environment.TODO_IMAGE_BUCKET}/*

  # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: "Allow"
        Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
        Resource:
        - "*"
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
      - Effect: Allow
        Action:
          - s3:DeleteObject
        Resource: arn:aws:s3:::${self:provider.environment.TODO_IMAGE_BUCKET}/*
  
  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: "Allow"
        Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
        Resource:
        - "*"
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.TODO_IMAGE_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}

resources:
  Resources:
    # TODO: Add any necessary AWS resources
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: ${self:provider.environment.PARTITION_KEY}
            AttributeType: S
          - AttributeName: ${self:provider.environment.SORT_KEY}
            AttributeType: S
          - AttributeName: ${self:provider.environment.INDEX_KEY}
            AttributeType: S
        KeySchema:
          - AttributeName: ${self:provider.environment.PARTITION_KEY}
            KeyType: HASH
          - AttributeName: ${self:provider.environment.SORT_KEY}
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEX_NAME}
            KeySchema:
              - AttributeName: ${self:provider.environment.PARTITION_KEY}
                KeyType: HASH
              - AttributeName: ${self:provider.environment.INDEX_KEY}
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODO_TABLE}

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.TODO_IMAGE_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.TODO_IMAGE_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

custom:

  serverless-offline:
    port: 3003

  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true

  documentation:
    api:
      info:
        version: v1.0.0
        title: Todo API
        description: Serverless application for TODO lists
    models:
      - name: TodoCreateRequest
        contentType: application/json
        schema: ${file(models/create-todo-request.json)}
      - name: TodoUpdateRequest
        contentType: application/json
        schema: ${file(models/update-todo-request.json)}
